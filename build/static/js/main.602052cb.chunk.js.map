{"version":3,"sources":["store.js","App.js","serviceWorker.js","index.js"],"names":["initialState","todolist","value","state","isEdit","pending","finished","store","createStore","arguments","length","undefined","action","type","Object","objectSpread","concat","toConsumableArray","payload","slice","map","item","index","App","react_default","a","createElement","Component","Boolean","window","location","hostname","match","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAGMA,EAAe,CACjBC,SAAS,CACP,CAACC,MAAO,4BAAcC,OAAO,EAAOC,QAAQ,IAE9CC,QAAS,EACTC,SAAU,GA4ECC,EAFHC,YA9Da,WAAiC,IAAhCL,EAAgCM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBT,EAAcY,EAAUH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAOC,EAAOC,MACV,IAVI,MAWA,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIF,SAAQ,GAAAe,OAAAF,OAAAG,EAAA,EAAAH,CAAMX,EAAMF,UAAZa,OAAAG,EAAA,EAAAH,CAAyBF,EAAOM,YAGhD,IAfO,SAgBH,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIF,SAAQ,GAAAe,OAAAF,OAAAG,EAAA,EAAAH,CAAMX,EAAMF,SAASkB,MAAM,EAAGP,EAAOM,UAArCJ,OAAAG,EAAA,EAAAH,CAAkDX,EAAMF,SAASkB,MAAMP,EAAOM,QAAU,OAGxG,IApBO,SAqBH,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIF,SAASa,OAAAG,EAAA,EAAAH,CAAKF,EAAOM,WAG7B,IAzBa,eA0BT,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIF,SAASa,OAAAG,EAAA,EAAAH,CAAKX,EAAMF,SAASmB,IAAI,SAACC,EAAMC,GAIpC,OAHGA,IAAUV,EAAOM,UAChBG,EAAKlB,OAASkB,EAAKlB,OAEhBkB,OAInB,IAnCQ,UAoCJ,OAAOP,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIE,QAASO,EAAOM,QAAU,EAAIN,EAAOM,QAAU,IAGvD,IAxCS,WAyCL,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIG,SAAUM,EAAOM,QAAU,EAAIN,EAAOM,QAAU,IAGxD,IA7CS,WA8CL,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACAX,EADP,CAEIF,SAASa,OAAAG,EAAA,EAAAH,CAAKX,EAAMF,SAASmB,IAAI,SAACC,EAAMC,GAKpC,OAJGA,IAAUV,EAAOM,QAAQ,KACxBG,EAAKjB,OAASQ,EAAOM,QAAQ,GAC7BG,EAAKnB,MAAQU,EAAOM,QAAQ,IAEzBG,OAKnB,QACI,OAAOlB,6CCnEEoB,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,uCAH2BC,cCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAU5B,MAAQA,GAAQiB,EAAAC,EAAAC,cAACU,EAAD,OAAoBC,SAASC,eAAe,SDkHhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.602052cb.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\n// 初始化store state状态数据\nconst initialState = {\n    todolist:[\n      {value: 'reducer初始值', state: false, isEdit: false}\n    ],\n    pending: 1, //正在进行\n    finished: 0, //已完成\n }\n\n// 定义action类型\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\";\nconst UPDATE = \"UPDATE\";\nconst CHANGE_STATE = \"CHANGE_STATE\";\nconst COMPING = \"COMPING\";\nconst FINISHED = \"FINISHED\";\nconst EDITABLE = \"EDITABLE\";\n// 创建reducer函数\nconst educationReducer = (state = initialState, action)=> {\n    switch(action.type){\n        case ADD: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                todolist: [...state.todolist, ...action.payload]\n            }\n        }\n        case DELETE: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                todolist: [...state.todolist.slice(0, action.payload), ...state.todolist.slice(action.payload + 1)]\n            }\n        }\n        case UPDATE: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                todolist: [...action.payload]\n            }\n        }\n        case CHANGE_STATE: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                todolist: [...state.todolist.map((item, index) => {\n                    if(index === action.payload){\n                        item.state = !item.state;\n                    }\n                    return item;\n                })]\n            }\n        }\n        case COMPING: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                pending: action.payload > 0 ? action.payload : 0\n            }\n        }\n        case FINISHED: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                finished: action.payload > 0 ? action.payload : 0\n            }\n        }\n        case EDITABLE: {\n            return {\n                ...state, // 解构下当前state,保持state最新\n                todolist: [...state.todolist.map((item, index) =>{\n                    if(index === action.payload[0]){\n                        item.isEdit = action.payload[1];\n                        item.value = action.payload[2]\n                    }\n                    return item;\n                })]\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\n// 基于reducer创建store存储空间 \nlet store = createStore(educationReducer);\n\nexport default store;\n\n\n","/*\n * @filename: \n * @Date: 2020-01-18 20:08:12\n * @Author: wangYuan  <yuan.wang07@hand-china.com>\n * @version: 1.0.0\n * @copyright: Copyright (c) 2020, Hand\n */\nimport React,{ Component } from 'react';\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        hello React Hooks\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * @filename: \n * @Date: 2020-01-18 20:08:12\n * @Author: wangYuan  <yuan.wang07@hand-china.com>\n * @version: 1.0.0\n * @copyright: Copyright (c) 2020, Hand\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}